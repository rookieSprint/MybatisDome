<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace:必须是接口的全路径名
	方法名必须与sql id相同
	方法的入参必须与parameterType类型一致
	方法的返回值必须与resultType一致
 -->
<!-- 写Sql语句   -->
<mapper namespace="com.dyl.mybatis.mapper.UserMapper">
    <!-- sql片段的抽取 -->
    <sql id="sql_id">
        select * from user
    </sql>
	<!-- 通过ID查询一个用户 -->
	<select id="findUserById" parameterType="Integer" resultType="User">
	    <!-- sql片段的引用 -->
		<include refid="sql_id"></include>
		 where id = #{v}
	</select>
	
	<!-- //根据用户名称模糊查询用户列表
	#{}    select * from user where id = ？    占位符  ? ==  '五'
	${}    select * from user where username like '%五%'  字符串拼接  
	
	 -->
	<select id="findUserByUsername" parameterType="String" resultType="com.dyl.mybatis.pojo.User">
		select * from user where username like "%"#{haha}"%"
	</select>
	<select id="queryUserByQueryVo" parameterType="QueryVo" resultType="User">
	    select * from user where username like '%${user.username}%'
	</select>
	<select id="queryUserWhere" parameterType="user" resultType="user">
	   select * from `user`
	  <!--  where 1=1
	   <if test="sex != null">
	       and sex=#{sex}
	   </if> 
	       字符串判null和判空串("")  加1=1 为了消除语句中当前面条件为false时 语句中多出的 and
	   <if test="username != null and username !=''">
	       and username LIKE '%${username}%'
	   </if> -->
	   <!-- where标签自动补全语句中的标签 ，并消除多余的and  使用了where标签就不能再手动的添加where关键字 -->
	   <where>
	       <if test="sex != null">
	      	 and sex=#{sex}
		   </if> 
		   <if test="username != null and username !=''">
		       and username LIKE '%${username}%'
		   </if>
	   </where>
	</select>
	<select id="findUserByids" parameterType="QueryVo" resultType="User">
	    select * from user
	    <where>
	        <!-- 
	        	collection:要遍历的集合
	        	open：循环开始之前输出的内容
	        	separator：分隔符
	        	item：循环变量（自己随便写  最后要和#{}中的名称一样）
	        	close：循环之后输出的内容
	         -->
	        <foreach collection="ids" open="id in (" item="uid" separator="," close=")">
	            #{uid}
	        </foreach>
	    </where>
	</select>
	
	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="com.dyl.mybatis.pojo.User">
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user (username,birthday,address,sex) 
		values (#{username},#{birthday},#{address},#{sex})
	</insert>
	
	<!-- 更新 -->
	<update id="updateUserById" parameterType="com.dyl.mybatis.pojo.User">
		update user 
		set username = #{username},sex = #{sex},birthday = #{birthday},address = #{address}
		where id = #{id}
	</update>
	
	<!-- 删除 -->
	<delete id="deleteUserById" parameterType="Integer">
		delete from user 
		where id = #{vvvvv}
	</delete>
	


</mapper>